"use strict";(self.webpackChunkp2panda_website=self.webpackChunkp2panda_website||[]).push([[843],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=o(a),u=i,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:i,r[1]=m;for(var o=2;o<l;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3036:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return m},metadata:function(){return o},toc:function(){return c}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],m={id:"schemas"},s="Schemas",o={unversionedId:"writing-data/schemas",id:"writing-data/schemas",title:"Schemas",description:"- schemas are used to describe and validate the format in which data is published",source:"@site/docs/01-writing-data/schemas.md",sourceDirName:"01-writing-data",slug:"/writing-data/schemas",permalink:"/handbook/docs/writing-data/schemas",editUrl:"https://github.com/p2panda/handbook/edit/main/website/docs/01-writing-data/schemas.md",tags:[],version:"current",frontMatter:{id:"schemas"},sidebar:"docs",previous:{title:"Key Pairs",permalink:"/handbook/docs/writing-data/key-pairs"},next:{title:"Operations",permalink:"/handbook/docs/writing-data/operations"}},p={},c=[{value:"Fields",id:"fields",level:2},{value:"<em>bool</em> fields",id:"bool-fields",level:3},{value:"<em>int</em> fields",id:"int-fields",level:3},{value:"<em>float</em> fields",id:"float-fields",level:3},{value:"<em>str</em> fields",id:"str-fields",level:3},{value:"<em>relation</em> fields",id:"relation-fields",level:3},{value:"System and Application Schemas",id:"system-and-application-schemas",level:2},{value:"Schema ID",id:"schema-id",level:3},{value:"System Schemas",id:"system-schemas",level:2},{value:"Schema Definition",id:"schema-definition",level:3},{value:"Schema Field Definition",id:"schema-field-definition",level:3}],d={toc:c};function u(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"schemas"},"Schemas"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"schemas are used to describe and validate the format in which data is published"),(0,l.kt)("li",{parentName:"ul"},"schemas are identified by their ",(0,l.kt)("a",{parentName:"li",href:"#schema-id"},"schema id")),(0,l.kt)("li",{parentName:"ul"},"schemas have a name, a description and a number of ",(0,l.kt)("em",{parentName:"li"},"fields")),(0,l.kt)("li",{parentName:"ul"},"the name of a schema MUST match the regular expression ",(0,l.kt)("inlineCode",{parentName:"li"},"([A-Za-z]{1}[A-Za-z0-9_]{0,63})"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the name of a schema MUST be at most 64 characters long"),(0,l.kt)("li",{parentName:"ul"},"it begins with a letter"),(0,l.kt)("li",{parentName:"ul"},"it uses only alphanumeric characters, digits and the underscore character ( ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," )"))),(0,l.kt)("li",{parentName:"ul"},"the description of a schema MUST consist of unicode characters and MUST be at most 256 characters long"),(0,l.kt)("li",{parentName:"ul"},"a schema MUST have at most 1024 fields")),(0,l.kt)("h2",{id:"fields"},"Fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a field is defined by",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"field name")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"field type")))),(0,l.kt)("li",{parentName:"ul"},"the field name MUST match the regular expression ",(0,l.kt)("inlineCode",{parentName:"li"},"([A-Za-z]{1}[A-Za-z0-9_]{0,63})"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the field name MUST be at most 64 characters long"),(0,l.kt)("li",{parentName:"ul"},"it begins with a letter"),(0,l.kt)("li",{parentName:"ul"},"it uses only alphanumeric characters, digits and the underscore character ( ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," )"))),(0,l.kt)("li",{parentName:"ul"},"the field type MUST be one of",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"str")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"relation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"relation list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"pinned relation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"pinned relation list"))))),(0,l.kt)("h3",{id:"bool-fields"},(0,l.kt)("em",{parentName:"h3"},"bool")," fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"encode a boolean value")),(0,l.kt)("h3",{id:"int-fields"},(0,l.kt)("em",{parentName:"h3"},"int")," fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"encode a signed 64 bit integer number")),(0,l.kt)("h3",{id:"float-fields"},(0,l.kt)("em",{parentName:"h3"},"float")," fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"encode a 64 bit floating point number")),(0,l.kt)("h3",{id:"str-fields"},(0,l.kt)("em",{parentName:"h3"},"str")," fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"encode a text string"),(0,l.kt)("li",{parentName:"ul"},"MUST use unicode encoding")),(0,l.kt)("h3",{id:"relation-fields"},(0,l.kt)("em",{parentName:"h3"},"relation")," fields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"encode a ",(0,l.kt)("em",{parentName:"li"},"relation")," to one or many other ",(0,l.kt)("em",{parentName:"li"},"documents")),(0,l.kt)("li",{parentName:"ul"},"all relation fields MUST define a schema that all referenced documents must conform to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"relation")," fields MAY be self-referential in that their target is of the same schema",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"self-referential relations MAY be interpreted as instance ordering in ",(0,l.kt)("a",{parentName:"li",href:"/docs/organising-data/queries"},"queries")))),(0,l.kt)("li",{parentName:"ul"},"there are four kinds of relation fields",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"relations represent the whole referenced document through their ",(0,l.kt)("em",{parentName:"li"},"document id"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"relation"),": reference to a single document"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"relation list"),": a list of references to documents"))),(0,l.kt)("li",{parentName:"ul"},"pinned relations point at immutable versions of documents through their ",(0,l.kt)("em",{parentName:"li"},"document view ids"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"pinned relation"),": reference to a single document view."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"pinned relation list"),": a list of references to document views")))))),(0,l.kt)("h2",{id:"system-and-application-schemas"},"System and Application Schemas"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"system schemas")," are defined as part of the p2panda specification",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"system schemas MAY have unique procedures for ",(0,l.kt)("a",{parentName:"li",href:"/docs/organising-data/reduction"},(0,l.kt)("em",{parentName:"a"},"reduction")),", ",(0,l.kt)("a",{parentName:"li",href:"/docs/collaboration/reconciliation"},(0,l.kt)("em",{parentName:"a"},"reconciliation"))," and ",(0,l.kt)("em",{parentName:"li"},"persistence")," of their documents"),(0,l.kt)("li",{parentName:"ul"},"the format of system schema operations can be validated by their CDDL definitions"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"application schemas")," are published by developers",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"they are used to validate the format of application specific data"),(0,l.kt)("li",{parentName:"ul"},"all developers can create new application schemas by publishing documents of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SchemaDefinition")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"SchemaFieldDefinition")," system schemas"),(0,l.kt)("li",{parentName:"ul"},"they are published as reusable data schemas and can be used in many applications")))),(0,l.kt)("h3",{id:"schema-id"},"Schema ID"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"schema ids are strings that uniquely identify a schema"),(0,l.kt)("li",{parentName:"ul"},"every system schema's schema id is given in that schema's section below",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"they always start with the schema's name in snake case"),(0,l.kt)("li",{parentName:"ul"},"then an underscore separator"),(0,l.kt)("li",{parentName:"ul"},"then the letter v, followed by the schema's version number as an integer"),(0,l.kt)("li",{parentName:"ul"},"example: ",(0,l.kt)("inlineCode",{parentName:"li"},"key_group_v1")))),(0,l.kt)("li",{parentName:"ul"},"application schema ids are constructed from the schema's name and document view id",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"they consist of sections separated by an underscore"),(0,l.kt)("li",{parentName:"ul"},"the first section is the name, which must have 1-64 characters, must start with a letter and must contain only alphanumeric characters and underscores"),(0,l.kt)("li",{parentName:"ul"},"the remaining sections are the document view id of the schema's ",(0,l.kt)("inlineCode",{parentName:"li"},"schema_v1")," document, represented as alphabetically sorted hex-encoded operation ids, separated by underscores."),(0,l.kt)("li",{parentName:"ul"},"example ",(0,l.kt)("inlineCode",{parentName:"li"},"profile_picture_0020c65567ae37efea293e34a9c7d13f8f2bf23dbdc3b5c7b9ab46293111c48fc78b"))))),(0,l.kt)("h2",{id:"system-schemas"},"System Schemas"),(0,l.kt)("h3",{id:"schema-definition"},"Schema Definition"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"schema id: ",(0,l.kt)("inlineCode",{parentName:"li"},"schema_definition_v1")),(0,l.kt)("li",{parentName:"ul"},"used to publish ",(0,l.kt)("a",{parentName:"li",href:"#system-and-application-schemas"},"application schemas")),(0,l.kt)("li",{parentName:"ul"},"in order to be a valid description of an application schema, a schema definition's fields MUST conform with the restrictions for schema name, description and fields ",(0,l.kt)("a",{parentName:"li",href:"#"},"described at the top")),(0,l.kt)("li",{parentName:"ul"},"fields:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"name: string"),(0,l.kt)("li",{parentName:"ul"},"description: string"),(0,l.kt)("li",{parentName:"ul"},"fields: a pinned relation list referencing ",(0,l.kt)("inlineCode",{parentName:"li"},"SchemaFieldDefinition")," documents")))),(0,l.kt)("h3",{id:"schema-field-definition"},"Schema Field Definition"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"schema id: ",(0,l.kt)("inlineCode",{parentName:"li"},"schema_field_definition_v1")),(0,l.kt)("li",{parentName:"ul"},"defines individual fields for ",(0,l.kt)("a",{parentName:"li",href:"#schema-definition"},"schema definitions")),(0,l.kt)("li",{parentName:"ul"},"fields:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"name: string"),(0,l.kt)("li",{parentName:"ul"},"type: string",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"MUST be one of",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool"),": boolean"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int"),": integer number"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float"),": floating point number"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str"),": string"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relation"),": reference to a document"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relation_list"),": a list of references to documents"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pinned_relation"),": reference to a document view"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pinned_relation_list"),": a list of references to document views"))),(0,l.kt)("li",{parentName:"ul"},"all ",(0,l.kt)("em",{parentName:"li"},"relation")," field types need to specify a schema"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"TODO: define format of reference to a schema"))))))))}u.isMDXComponent=!0}}]);
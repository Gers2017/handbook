"use strict";(self.webpackChunkp2panda_website=self.webpackChunkp2panda_website||[]).push([[843],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return p}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(a),p=i,f=u["".concat(s,".").concat(p)]||u[p]||d[p]||r;return a?n.createElement(f,l(l({ref:t},c),{},{components:a})):n.createElement(f,l({ref:t},c))}));function p(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3036:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return c},default:function(){return u}});var n=a(3117),i=a(102),r=(a(7294),a(3905)),l=["components"],o={id:"schemas"},s="Schemas",m={unversionedId:"writing-data/schemas",id:"writing-data/schemas",title:"Schemas",description:"- schemas are used to describe and validate the format in which data is published",source:"@site/docs/01-writing-data/schemas.md",sourceDirName:"01-writing-data",slug:"/writing-data/schemas",permalink:"/handbook/docs/writing-data/schemas",editUrl:"https://github.com/p2panda/handbook/edit/main/website/docs/01-writing-data/schemas.md",tags:[],version:"current",frontMatter:{id:"schemas"},sidebar:"docs",previous:{title:"Key Pairs",permalink:"/handbook/docs/writing-data/key-pairs"},next:{title:"Operations",permalink:"/handbook/docs/writing-data/operations"}},c=[{value:"Encoding",id:"encoding",children:[],level:2},{value:"Fields",id:"fields",children:[{value:"<em>bool</em> fields",id:"bool-fields",children:[],level:3},{value:"<em>int</em> fields",id:"int-fields",children:[],level:3},{value:"<em>float</em> fields",id:"float-fields",children:[],level:3},{value:"<em>str</em> fields",id:"str-fields",children:[],level:3},{value:"<em>relation</em> fields",id:"relation-fields",children:[],level:3},{value:"<em>relation_list</em> fields",id:"relation_list-fields",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"schemas"},"Schemas"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"schemas are used to describe and validate the format in which data is published"),(0,r.kt)("li",{parentName:"ul"},"schemas have a name, a description and a number of ",(0,r.kt)("em",{parentName:"li"},"fields")),(0,r.kt)("li",{parentName:"ul"},"the name of a schema MUST match the regular expression ",(0,r.kt)("inlineCode",{parentName:"li"},"([A-Za-z][A-Za-z0-9_]{1,63})"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the name of a schema MUST be at most 64 characters long"),(0,r.kt)("li",{parentName:"ul"},"it begins with a letter"),(0,r.kt)("li",{parentName:"ul"},"it uses only alphanumeric characters, digits and the underscore character ( _ )"))),(0,r.kt)("li",{parentName:"ul"},"the description of a schema MUST consist of unicode characters and MUST be at most 256 characters long"),(0,r.kt)("li",{parentName:"ul"},"a schema MUST have at most 1024 fields")),(0,r.kt)("h2",{id:"encoding"},"Encoding"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a schema definition is an encoding of its name, description and fields"),(0,r.kt)("li",{parentName:"ul"},"a schema definition can be encoded using CDDL"),(0,r.kt)("li",{parentName:"ul"},"a schema definition can be encoded using the ",(0,r.kt)("em",{parentName:"li"},"metaschema"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("em",{parentName:"li"},"metaschema")," is a p2panda schema that allows publishing schema definitions")))),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a field is defined by",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"field name")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"field type")))),(0,r.kt)("li",{parentName:"ul"},"the field name MUST have only alphanumeric characters and MUST be at most 64 characters long"),(0,r.kt)("li",{parentName:"ul"},"the field type MUST be one of",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"bool")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"int")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"float")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"str")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"relation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"relation","_","list"))))),(0,r.kt)("h3",{id:"bool-fields"},(0,r.kt)("em",{parentName:"h3"},"bool")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a boolean value")),(0,r.kt)("h3",{id:"int-fields"},(0,r.kt)("em",{parentName:"h3"},"int")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a signed 64 bit integer number")),(0,r.kt)("h3",{id:"float-fields"},(0,r.kt)("em",{parentName:"h3"},"float")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a 64 bit floating point number")),(0,r.kt)("h3",{id:"str-fields"},(0,r.kt)("em",{parentName:"h3"},"str")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a text string"),(0,r.kt)("li",{parentName:"ul"},"MUST use unicode encoding")),(0,r.kt)("h3",{id:"relation-fields"},(0,r.kt)("em",{parentName:"h3"},"relation")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a ",(0,r.kt)("em",{parentName:"li"},"relation")," to another ",(0,r.kt)("em",{parentName:"li"},"document")),(0,r.kt)("li",{parentName:"ul"},"specify a ",(0,r.kt)("em",{parentName:"li"},"document")," and an optional ",(0,r.kt)("em",{parentName:"li"},"document view"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'"document" is the document that the relation is pointing at'),(0,r.kt)("li",{parentName:"ul"},'"document_view" defines the exact version of the document as a list of document graph tips'),(0,r.kt)("li",{parentName:"ul"},"applications MAY ignore ",(0,r.kt)("inlineCode",{parentName:"li"},"document_view")," and interpret the relation to point at the latest version if that makes sense in the application's context"))),(0,r.kt)("li",{parentName:"ul"},"a relation field prescribes a schema for the referenced document"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"relation")," fields MAY be self-referential in that their target is of the same schema",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"self-referential relations MAY be interpreted as instance ordering in ",(0,r.kt)("a",{parentName:"li",href:"/docs/organising-data/queries"},"queries"))))),(0,r.kt)("h3",{id:"relation_list-fields"},(0,r.kt)("em",{parentName:"h3"},"relation","_","list")," fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"encode a list of ",(0,r.kt)("em",{parentName:"li"},"relations")," to other documents"),(0,r.kt)("li",{parentName:"ul"},"a relation list field prescribes a schema that all referenced documents must follow")))}u.isMDXComponent=!0}}]);
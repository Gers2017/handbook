"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[1009],{4137:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,c=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(c,r(r({ref:t},h),{},{components:n})):a.createElement(c,r({ref:t},h))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const o={title:"Operations and Documents"},r=void 0,l={unversionedId:"learn/operations",id:"learn/operations",title:"Operations and Documents",description:"Hello. This is work in progress and done soon!",source:"@site/docs/learn/operations.md",sourceDirName:"learn",slug:"/learn/operations",permalink:"/learn/operations",draft:!1,tags:[],version:"current",frontMatter:{title:"Operations and Documents"},sidebar:"learn",previous:{title:"Entries",permalink:"/learn/entries"},next:{title:"Networks",permalink:"/learn/networks"}},s={},p=[{value:"Operation Actions",id:"operation-actions",level:2},{value:"Documents",id:"documents",level:2},{value:"Operation Fields",id:"operation-fields",level:2},{value:"Operation Field Types",id:"operation-field-types",level:2},{value:"Schema",id:"schema",level:2},{value:"Encoding",id:"encoding",level:2},{value:"Operation Id",id:"operation-id",level:2},{value:"Document Id",id:"document-id",level:2},{value:"Document Views",id:"document-views",level:2},{value:"Operation Graphs",id:"operation-graphs",level:2}],h={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"I'm working on this right now",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Hello. This is work in progress and done soon!")),(0,i.kt)("p",null,"Most of the time, whenever we do something, we usually do it in multiple steps. For example when we cook a good curry for our friends."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"We can think of many other examples, but all of them have one thing in common: Every step changes the ",(0,i.kt)("em",{parentName:"p"},"state")," of things."),(0,i.kt)("admonition",{title:"Shirokuma Cafe",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When adding salt to your curry it will become salty.")),(0,i.kt)("p",null,"In p2panda we have a data type to describe a change of ",(0,i.kt)("em",{parentName:"p"},"something"),". We call this data type an ",(0,i.kt)("strong",{parentName:"p"},"Operation"),". We can think about it as steps to achieve a task, like writing a message, cooking a meal or uploading an image."),(0,i.kt)("p",null,"Operations are the core of p2panda, they can come in different shapes and surely there will be many more to come in the future. Maybe you have some ideas for new p2panda Operations?"),(0,i.kt)("h2",{id:"operation-actions"},"Operation Actions"),(0,i.kt)("p",null,"Another way to look at Operations is to see them as a chain of actions we apply to something, for example updating our current username."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"To describe this Operation we could say: \u201cEvery Operation updates our username\u201d and this is also exactly how p2panda Operations work: We can define UPDATE Operations on data, like usernames! And there is a little bit more: The first Operation is always CREATE, to announce that there is a new username at all. And maybe you want to also DELETE it even again at one point."),(0,i.kt)("p",null,"These are the three different ",(0,i.kt)("strong",{parentName:"p"},"Operation Actions")," p2panda currently has: CREATE, UPDATE and DELETE."),(0,i.kt)("admonition",{title:"Why do we write them like that?",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We write the Operation Actions in UPPERCASE just to make clear it is a defined constant and not an English verb in a regular sentence.")),(0,i.kt)("h2",{id:"documents"},"Documents"),(0,i.kt)("p",null,"As we\u2019re applying our Operations always to ",(0,i.kt)("em",{parentName:"p"},"something")," we need a term for that. In p2panda we call this a ",(0,i.kt)("strong",{parentName:"p"},"Document"),". It is the result of a series of Operations!"),(0,i.kt)("p",null,"For example: In our initial cooking scenario the series of Operations would lead to a Curry-Document, when updating our username it would lead to a Username-Document."),(0,i.kt)("p",null,"To create a new Document we send a CREATE Operation, to update it we follow with UPDATE Operations and then eventually we want to delete it with a final DELETE Operation."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"If there is a DELETE Operation in the Document then the complete Document can be considered deleted. In the following example we have Operations updating ",(0,i.kt)("em",{parentName:"p"},"diary entry")," Documents. The user created already 3 Documents but deleted one recently."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("h2",{id:"operation-fields"},"Operation Fields"),(0,i.kt)("p",null,"Documents are simple ",(0,i.kt)("em",{parentName:"p"},"Key-Value Maps")," which means that there is always a name of a field connected to some value. An User-Profile-Document could for example look like that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "username": "panda",\n  "is_cute": true,\n  "city": "Shirokuma Town",\n  "favorite_food": "Bamboo"\n}\n')),(0,i.kt)("p",null,"When we create a new Document with a CREATE Operation we have to make sure that all ",(0,i.kt)("strong",{parentName:"p"},"Operation Fields")," are given. For UPDATE Operations we only have to mention the fields we want to change. DELETE Operations do not need to mention any fields as we\u2019re simply just telling everyone that we want the Document to be deleted."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"With this we can imagine more complex Documents which can contain many different sorts of fields!"),(0,i.kt)("h2",{id:"operation-field-types"},"Operation Field Types"),(0,i.kt)("p",null,"In the above example we could already see two different sorts of ",(0,i.kt)("strong",{parentName:"p"},"Operation Values"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"panda")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"city")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"favorite_food")," were strings, but ",(0,i.kt)("inlineCode",{parentName:"p"},"is_cute")," was a boolean! p2panda currently supports the following basic ",(0,i.kt)("strong",{parentName:"p"},"Operation Field Types"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," Strings of any length, like ",(0,i.kt)("inlineCode",{parentName:"li"},"\u201dHello, World!\u201d")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool")," Either ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," i64 integer numbers, like ",(0,i.kt)("inlineCode",{parentName:"li"},"511")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"829187401")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," f64 float numbers, like ",(0,i.kt)("inlineCode",{parentName:"li"},"12.52")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"-255.12"))),(0,i.kt)("admonition",{title:"More to come!",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There will surely be more Operation Values in the future! An array would be good for example.")),(0,i.kt)("admonition",{title:"Relations",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Next to the basic types there are also ",(0,i.kt)("em",{parentName:"p"},"Relations"),". We will cover them in another chapter.")),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("p",null,"Our User-Profile-Document has a specific shape which needed to be fulfilled:"),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"Everyone in the p2panda network can define the shape of a Document and announce it in form of a ",(0,i.kt)("strong",{parentName:"p"},"Schema"),". Now users can refer to that Schema by using its identifier, the ",(0,i.kt)("strong",{parentName:"p"},"Schema Id"),". Whenever they publish an Operation with a certain Schema Id, the Operation needs to match the fields of the given Schema."),(0,i.kt)("admonition",{title:"More validation",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Currently schemas prescribe only the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of a field, but later we will have ",(0,i.kt)("inlineCode",{parentName:"p"},"regex"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," and many other validation methods as well, to restrict the data even more to a certain shape.")),(0,i.kt)("h2",{id:"encoding"},"Encoding"),(0,i.kt)("p",null,"After we\u2019ve created an operation we usually want to ",(0,i.kt)("strong",{parentName:"p"},"publish")," it by sending it to our node. For this we take the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Encode the operation"),(0,i.kt)("li",{parentName:"ol"},"Create an new Bamboo entry and use operation as its payload"),(0,i.kt)("li",{parentName:"ol"},"Sign and encode the entry"),(0,i.kt)("li",{parentName:"ol"},"Send entry and operation to node")),(0,i.kt)("admonition",{title:"Check out the other learn sections",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We will not talk about ",(0,i.kt)("a",{parentName:"p",href:"/learn/entries"},"Entries")," and ",(0,i.kt)("a",{parentName:"p",href:"/learn/networks"},"Nodes")," here, but for both parts we have other learn sections. If you\u2019re curious you should check them out!")),(0,i.kt)("p",null,"For Operations the ",(0,i.kt)("a",{parentName:"p",href:"http:///handbook/data-types/operations"},"specification")," prescribes an ",(0,i.kt)("strong",{parentName:"p"},"Operation Format"),". Here is an example of how to format an CREATE operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[1, 0, "profile_0020...", { "username": "Panda" }]\n')),(0,i.kt)("p",null,"We can see here that Operations are encoded as an array with a couple of fields inside which might already look familiar to us:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The first field indicates the ",(0,i.kt)("strong",{parentName:"li"},"Operation Version"),". It helps us to understand what encoding we can expect from the following data when we receive a new Operation from somewhere. It is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," here which is the first version."),(0,i.kt)("li",{parentName:"ol"},"The second field indicates the ",(0,i.kt)("strong",{parentName:"li"},"Operation Action "),"we already talked about before. ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," stands for CREATE, ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," for UPDATE and ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," for DELETE. In this example we\u2019re looking at a CREATE Operation."),(0,i.kt)("li",{parentName:"ol"},"The third field indicates the ",(0,i.kt)("strong",{parentName:"li"},"Schema Id")," we also talked about before. In the example its shortened, but we can imagine that this is where we set what schema this operation wants to fulfil."),(0,i.kt)("li",{parentName:"ol"},"The fourth and last field here are the ",(0,i.kt)("strong",{parentName:"li"},"Operation Fields")," with the actual application data we want to publish.")),(0,i.kt)("p",null,"This Operation Format will be now encoded as CBOR bytes which is a well known and slim encoding format. This is how it would look like (bytes represented as hexadecimal numbers):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'84                                   # array(4)\n   01                                # unsigned(1)\n   00                                # unsigned(0)\n   6F                                # text(15)\n      70726F66696C655F303032302...   # "profile_0020..."\n   A1                                # map(1)\n      68                             # text(8)\n         757365726E616D65            # "username"\n      65                             # text(5)\n         50616E6461                  # "Panda"\n')),(0,i.kt)("p",null,"We would send this data to a p2panda node, of course without the comments and with a complete schema id:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"840100784C70726F66696C655F3030323034336233653664613933366633633937663732373666303766363562303361303632373235666436363963323563373738653665653165336136333565393264A168757365726E616D656550616E6461\n")),(0,i.kt)("p",null,"You can decode this data again using the ",(0,i.kt)("a",{parentName:"p",href:"https://cbor.me"},"https://cbor.me")," playground. Just paste the hexadecimal string into the right area and click on the left-facing arrow button to decode the CBOR data. It also works the other way around!"),(0,i.kt)("h2",{id:"operation-id"},"Operation Id"),(0,i.kt)("p",null,"Whenever we encode an Operation and sign it with an Bamboo Entry we ",(0,i.kt)("em",{parentName:"p"},"sign")," the data and make it ",(0,i.kt)("em",{parentName:"p"},"immutable")," from that point on. If we would change the Operation now afterwards, the ",(0,i.kt)("em",{parentName:"p"},"Signature")," would break and we would need to reject this Operation as something invalid."),(0,i.kt)("admonition",{title:"Thank you Bamboo",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Bamboo Entries ",(0,i.kt)("em",{parentName:"p"},"seal")," Operations for us. They are the data type which makes sure that nobody tampered with our data after we\u2019ve sent it out.")),(0,i.kt)("p",null,"Since we used an Bamboo Entry to get this security and immutability we also receive an unique identifier after signing, encoding and hashing it: The Hash of the Entry becomes our ",(0,i.kt)("strong",{parentName:"p"},"Operation Id"),". It is an unique sequence of numbers which will indicate that we exactly want to refer to ",(0,i.kt)("em",{parentName:"p"},"this")," Operation."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"There are a couple of steps involved to achieve this: The Operation gets encoded as we\u2019ve just learned, then hashed for the Bamboo Entry where it will be inserted as the ",(0,i.kt)("em",{parentName:"p"},"Payload Hash"),". The Bamboo Entry gets signed, encoded and then hashed as well. ",(0,i.kt)("em",{parentName:"p"},"That")," resulting Entry Hash will be our Operation Id!"),(0,i.kt)("admonition",{title:"One more step",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Hui! Actually, if we want to be really precise: Before signing the Entry it already gets encoded once, just without the Signature. After signing it it gets encoded ",(0,i.kt)("em",{parentName:"p"},"again")," this time with the Signature.")),(0,i.kt)("h2",{id:"document-id"},"Document Id"),(0,i.kt)("p",null,"This is a fairly short section, but an important one:"),(0,i.kt)("p",null,"Every Document we\u2019ve created in p2panda has an unique identifier, the ",(0,i.kt)("strong",{parentName:"p"},"Document Id"),". Where does it come from? It is the Operation Id of the CREATE Operation which created that Document! This works because there will always only be one CREATE Operation per Document."),(0,i.kt)("h2",{id:"document-views"},"Document Views"),(0,i.kt)("p",null,"So far we\u2019ve only talked about creating Documents, but how does the Operation need to look like if we want to update or delete them?"),(0,i.kt)("p",null,"Similar to how you would refer to a row in a SQL database by its unique identifier we have to specify ",(0,i.kt)("em",{parentName:"p"},"which")," document we want to update or delete."),(0,i.kt)("p",null,"In p2panda everything can happen, since it is a decentralised system, so we need to be prepared for many users updating a document at the same time. Or someone updated something, but did it when they were offline! As a thought experiment, let\u2019s imagine multiple updates to the same document:"),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"Who was first? That\u2019s hard to tell! Usually we would just say that who has written last to the database will ",(0,i.kt)("em",{parentName:"p"},"win"),". If Elephant was slightly later sending its change it will say ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cElephant\u201d"),". In p2panda we don\u2019t have that central server though which just ",(0,i.kt)("em",{parentName:"p"},"knows")," who arrived later. We have many independent nodes where the updates might arrive differently. On the node of Penguin it might say ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cElephant\u201d")," and on the node of the Elephant it\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cPenguin\u201d"),", because the foreign updates arrived later due to the networking delays .. This is horrible!"),(0,i.kt)("p",null,"To fix this problem we need to ",(0,i.kt)("em",{parentName:"p"},"know")," what Penguin and Elephant did ",(0,i.kt)("em",{parentName:"p"},"see")," when they updated the document. What was their last ",(0,i.kt)("em",{parentName:"p"},"point of view")," when they wanted to update something? Maybe the Penguin only saw the original \u201cPanda\u201d profile and applied its changes, but Elephant saw later that Penguin made an update and applied its changes afterwards?"),(0,i.kt)("p",null,"For this we ask the user to also publish a ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field inside of every Operation if they want to update or delete a document. Inside this ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field they can specify what the latest ",(0,i.kt)("strong",{parentName:"p"},"Document View")," was they knew about."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"Whenever an Operation takes place, it will generate a new Document View. We can understand them as a ",(0,i.kt)("em",{parentName:"p"},"version")," or ",(0,i.kt)("em",{parentName:"p"},"revision")," of our Documents. When sending a CREATE Operation there is one Document and one Document View, both will contain the same data, as so far there is only one version of it. "),(0,i.kt)("p",null,"After we\u2019ve sent an UPDATE Operation things get more interesting: We still only have one Document, containing the latest changes, but gain one more Document View! The Document will always contain the sum of all changes, but we keep track of its ",(0,i.kt)("em",{parentName:"p"},"history")," with many Document Views."),(0,i.kt)("p",null,"In our Elephant / Penguin example we can see that indeed the Penguin applied its UPDATE Operation onto the original Document View of the Panda, followed by the Elephant. So what is the content of this Document? It is ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cElephant!"),". \ud83d\udc18 How can we be sure? It is because we follow the rule ",(0,i.kt)("strong",{parentName:"p"},"Last Write Wins")," and with the help of the ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," fields we can trace back who was ",(0,i.kt)("em",{parentName:"p"},"last"),"."),(0,i.kt)("p",null,"We encode UPDATE Operations like that: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  1,\n  1,\n  "profile_0020...",\n  ["0020..."],\n  {\n    "username": "Penguin"\n  }\n]\n')),(0,i.kt)("p",null,"Note that the Operation Action changed to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," now, which indicates that this is an UPDATE Operation now. Also there is a new field appearing after the Schema Id, which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field. It contains the Document View Id where we want to apply the update to."),(0,i.kt)("p",null,"UPDATE Operations do not require us to mention ",(0,i.kt)("em",{parentName:"p"},"all")," Operation Fields anymore, we only need to write the ones we want to update."),(0,i.kt)("p",null,"DELETE Operations also have a ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field: We have to mention from what point on we want this document to be deleted. Currently it will just cause the Document to be removed, but we will learn later that there are some interesting features around this sort of behaviour."),(0,i.kt)("p",null,"The encoding of DELETE Operations is similar, just that the Operation Action is ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," and we don\u2019t need to specify any Operation Fields since we just wanted to say that we would like to delete the document:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  1,\n  2,\n  "profile_0020...",\n  ["0020..."]\n]\n')),(0,i.kt)("p",null,"Let\u2019s look a little closer at this ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field: It is an array which contains a Hash string again. The Hash itself is the Id of the Operation we saw last, but why does it need to be an array of them?"),(0,i.kt)("p",null,"Here it gets really interesting and we might even talk a little bit about graphs."),(0,i.kt)("admonition",{title:"What is a Graph?",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Graphs are structures made of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"},"vertices and edges"),". You can probably imagine many graphs in your daily life: Public traffic networks are graphs, your family tree is a graph and a network of connected computers is a graph! When we say Graphs we usually mean a more abstract / mathematical idea of them, but still it helps us a lot to solve cool problems: For example finding the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"},"shortest path")," between two points inside of it.")),(0,i.kt)("h2",{id:"operation-graphs"},"Operation Graphs"),(0,i.kt)("p",null,"In our above example Penguin and Elephant behaved very well: They applied their changes correctly after each other. But what if Elephant would have applied its change at the same point as Penguin? We are back at square one."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"We end up with a situation where our Document suddenly has two different ends!"),(0,i.kt)("admonition",{title:"Look!",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"That\u2019s a graph with three vertices ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," and two edges (the two ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," links)!")),(0,i.kt)("p",null,"Both Penguin and Elephant edited the document ",(0,i.kt)("em",{parentName:"p"},"at the same time"),"! We can even proof it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," fields both pointing at Document View ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"!"),(0,i.kt)("admonition",{title:"Time Philosophy",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Not time in the sense of \u23f0 ",(0,i.kt)("inlineCode",{parentName:"p"},"11:34:58"),", but more in \ud83d\udd22 ",(0,i.kt)("em",{parentName:"p"},"causal order"))),(0,i.kt)("p",null,"What is the state of the Document now? Does it contain ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cPenguin\u201d")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"My name is: \u201cElephant\u201d")," if we request the latest version?"),(0,i.kt)("p",null,"This situation we call a ",(0,i.kt)("strong",{parentName:"p"},"Merge Conflict"),". It occurs when two users edit the same Operation Field at the same time. To resolve it we need a ",(0,i.kt)("strong",{parentName:"p"},"Conflict Resolution")," strategy and it is actually fairly simple: In p2panda we simply let the Operation win with the higher Operation Id!"),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"In our example the Operation Id ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," is higher than the one of Operation Id ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),". So the Elephant will win! The good thing about this solution is also that all nodes which will see these Operations will decide for the same outcome. This makes the Conflict Resolution Strategy ",(0,i.kt)("em",{parentName:"p"},"deterministic"),"."),(0,i.kt)("p",null,"Is this fair? Since Operation Ids are based on Entry Hashes which are unique it is randomly decided who will win. This is maybe arbitrary but more fair than sorting the winner by timestamp, since you would be able to make up a higher timestamp in a decentralised protocol."),(0,i.kt)("p",null,"With these features we made Operations a ",(0,i.kt)("strong",{parentName:"p"},"Conflict Resistant Data Type (CRDT)"),". That means: We can make updates on arbitrary documents but never have to worry about merge conflicts which will make the whole system fail. With these two simple rules we can already solve it: 1. Operations are ordered in an Operation Graph based on their ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," fields 2. Conflicting updates on the same Operation Field are won by the Operation with the higher Operation Id."),(0,i.kt)("admonition",{title:"Two simple rules to make a CRDT",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There is a lot of theory around ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"},"CRDTs"),", but really, its basically these two rules you need to define to get one: How do you order data and what is the rule when something conflicts?")),(0,i.kt)("p",null,"We have missed out on one initial point though which actually was the reason why we started this section: Why is ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," an array field? Let\u2019s imagine there is someone new who wants to apply an UPDATE Operation on the Document. Where would this user apply this update to? On the Penguin Document View or the Elephant Document View? The correct answer would be: On both of them, because this is the latest state of the Operation Graph, and for this we need an array."),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"This new animal in town creates a new Operation with Id ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," and relates to both Operation ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," in its ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," field. We call this a ",(0,i.kt)("strong",{parentName:"p"},"Merge"),"."),(0,i.kt)("p",null,"We can use a Merge as a strategy to ",(0,i.kt)("em",{parentName:"p"},"manually")," resolve a Merge Conflict. But it\u2019s not like this is their only purpose. It is also just describing your perspective on the Document: In the moment you wanted to make an update you have been aware that there were two concurrent changes being made before and you just wanted to note that."),(0,i.kt)("p",null,"As already mentioned, solving Merge Conflicts is only important when we write to the same Operation Field, if we\u2019re concurrently writing to different fields then we also don\u2019t have a conflict. Let\u2019s look at this example:"),(0,i.kt)("p",null,"[IMAGE]"),(0,i.kt)("p",null,"We can see that Operation Graphs are quite powerful. In a way we can see them as a tool which helps us to describe what we knew about the world when we decided something. In p2panda these views can be quite different: Some users might have been applying changes for weeks without connection to the internet. As soon as they went back online and ",(0,i.kt)("em",{parentName:"p"},"synced up")," their changes with the others, we can see in the Operation Graph that a lot happened while the offline user made all of these changes. But this is not a problem, thanks to CRDTs."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[892],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),h=o,y=u["".concat(s,".").concat(h)]||u[h]||p[h]||a;return t?r.createElement(y,i(i({ref:n},d),{},{components:t})):r.createElement(y,i({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(4137));const a={id:"replication",title:"Replication"},i=void 0,l={unversionedId:"specification/APIs/replication",id:"specification/APIs/replication",title:"Replication",description:"- this api consists of GraphQL queries for other nodes to ask about the state of bamboo logs, entries and payloads",source:"@site/docs/specification/APIs/replication.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/replication",permalink:"/handbook/specification/APIs/replication",draft:!1,tags:[],version:"current",frontMatter:{id:"replication",title:"Replication"},sidebar:"specification",previous:{title:"Queries",permalink:"/handbook/specification/APIs/queries"},next:{title:"Clients and nodes",permalink:"/handbook/specification/networking/clients-nodes"}},s={},c=[{value:"<code>entryByHash</code>",id:"entrybyhash",level:2},{value:"<code>entryByLogIdAndSeqNum</code>",id:"entrybylogidandseqnum",level:2},{value:"<code>entriesNewerThanSeqNum</code>",id:"entriesnewerthanseqnum",level:2},{value:"Encoded entries with operation",id:"encoded-entries-with-operation",level:2},{value:"Pagination",id:"pagination",level:2}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"this api consists of GraphQL queries for other nodes to ask about the state of bamboo logs, entries and payloads",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"these queries are enough to build a flexible replication protocol on top"))),(0,o.kt)("li",{parentName:"ul"},"nodes need to implement the API specifications to make sure they are compatible with all other node and client implementations.")),(0,o.kt)("h2",{id:"entrybyhash"},(0,o.kt)("inlineCode",{parentName:"h2"},"entryByHash")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nget an entry by its hash\n"""\nentryByHash(hash: EntryHash!): EncodedEntryAndOperation\n')),(0,o.kt)("h2",{id:"entrybylogidandseqnum"},(0,o.kt)("inlineCode",{parentName:"h2"},"entryByLogIdAndSeqNum")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nget a single entry by its log id, sequence number and public key\n"""\nentryByLogIdAndSeqNum(\n  """\n  id of the log\n  """\n  logId: LogId!\n\n  """\n  public key of author of the log\n  """\n  public_key: PublicKey!\n\n  """\n  sequence number of the entry in the log\n  """\n  seqNum: SeqNum!\n): EncodedEntryAndOperation\n')),(0,o.kt)("h2",{id:"entriesnewerthanseqnum"},(0,o.kt)("inlineCode",{parentName:"h2"},"entriesNewerThanSeqNum")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"used as the main query for replication, see process defined further below")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nget any entries that are newer than the provided sequence_number for a given\npublic key and log_id\n"""\nentriesNewerThanSeqNum(\n  """\n  id of the log\n  """\n  logId: LogId!\n\n  """\n  public key of author of the log\n  """\n  public_key: PublicKey!\n\n  """\n  latest known sequence number. we want the entries which are newer than this,\n  defaults to 0\n  """\n  seqNum: SeqNum\n\n  """\n  max number of items to be returned per page, defaults to 10\n  """\n  first: Int\n\n  """\n  cursor identifier for pagination\n  """\n  after: String\n): EncodedEntryAndOperationConnection!\n')),(0,o.kt)("h2",{id:"encoded-entries-with-operation"},"Encoded entries with operation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'type EncodedEntryAndOperation {\n    """\n    entry bytes encoded as hexadecimal string\n    """\n    entry: EncodedEntry!\n\n    """\n    operation (payload of the entry) bytes encoded as hexadecimal string\n    """\n    operation: EncodedOperation\n\n    """\n    get the certificate pool for this entry that can be used to verify the entry\n    is valid\n    """\n    certificatePool: [EncodedEntry!]!\n}\n')),(0,o.kt)("h2",{id:"pagination"},"Pagination"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'type EncodedEntryAndOperationConnection {\n    """\n    information to aid in pagination\n    """\n    pageInfo: PageInfo!\n\n    """\n    a list of edges.\n    """\n    edges: [EncodedEntryAndOperationEdge]\n}\n\n"""\nan edge in a connection\n"""\ntype EncodedEntryAndOperationEdge {\n    """\n    the item at the end of the edge\n    """\n    node: EncodedEntryAndOperation!\n\n    """\n    a cursor for use in pagination\n    """\n    cursor: String!\n}\n\n"""\ninformation about pagination in a connection\n"""\ntype PageInfo {\n    """\n    when paginating backwards, are there more items?\n    """\n    hasPreviousPage: Boolean!\n\n    """\n    when paginating forwards, are there more items?\n    """\n    hasNextPage: Boolean!\n\n    """\n    when paginating backwards, the cursor to continue\n    """\n    startCursor: String\n\n    """\n    when paginating forwards, the cursor to continue\n    """\n    endCursor: String\n}\n')))}p.isMDXComponent=!0}}]);
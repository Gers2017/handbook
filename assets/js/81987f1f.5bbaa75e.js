"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[114],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(4137));const i={id:"documents-and-schema",title:"Documents & Schema"},o=void 0,c={unversionedId:"specification/documents-and-schema",id:"specification/documents-and-schema",title:"Documents & Schema",description:"Documents",source:"@site/docs/specification/documents-and-schema.md",sourceDirName:"specification",slug:"/specification/documents-and-schema",permalink:"/handbook/specification/documents-and-schema",draft:!1,tags:[],version:"current",frontMatter:{id:"documents-and-schema",title:"Documents & Schema"},sidebar:"specification",previous:{title:"Identities",permalink:"/handbook/specification/identities"},next:{title:"Authorisation",permalink:"/handbook/specification/authorisation"}},s={},p=[{value:"Documents",id:"documents",level:2},{value:"Schema",id:"schema",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"documents"},"Documents"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/documents"},"Documents")," are mutable data items which live on a p2panda network. Authors can create, update and delete documents. A document might be a blog post, a wiki page, a chat message, a user account, a configuration setting, a game board. They are multi-writer capable and have in-built properties which deterministically reslove confilicting writes."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/specification/networking/clients-nodes"},"Nodes")," are responsible for persisting documents and offering them on a public API so they can be queried by clients. They also offer the public API for all write actions relating to documents."),(0,r.kt)("p",null,"Documents can be assigned to an identity, giving them a concept of ",(0,r.kt)("a",{parentName:"p",href:"/specification/authorisation"},"permissions"),", with the ability to add and remove other identities over the life of a document. ",(0,r.kt)("a",{parentName:"p",href:"/specification/encryption"},"Encryption")," is available via the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"MLS")," encryption."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/schemas"},"Schema")," specify the fields and values a document contains. When a document is published or updated, the request must be checked against the claimed schema. If it doesn't pass validation then the request will be rejected. This ensures all data on a p2panda network strictly follows a known schema. An application developer would publish their own schema based on the data required for their needs, or they could re-use schema already existing on their network."),(0,r.kt)("p",null,"Some schema are specified as part of the p2panda protocol, these are called ",(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/schemas#system-schemas"},"system schema"),", others are dynamically published by application developers and distributed across the network, these are called ",(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/schemas#system-and-application-schemas"},"application schema")))}d.isMDXComponent=!0}}]);
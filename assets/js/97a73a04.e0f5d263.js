"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[70],{4137:(t,e,a)=>{a.d(e,{Zo:()=>l,kt:()=>m});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),c=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},l=function(t){var e=c(t.components);return n.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),d=c(a),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(f,i(i({ref:e},l),{},{components:a})):n.createElement(f,i({ref:e},l))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,i=new Array(o);i[0]=d;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5354:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=a(7462),r=(a(7294),a(4137));const o={title:"Glossary"},i=void 0,p={unversionedId:"specification/glossary",id:"specification/glossary",title:"Glossary",description:"CBOR: Concise Binary Object Representation data format used for encoding operations.",source:"@site/docs/specification/glossary.md",sourceDirName:"specification",slug:"/specification/glossary",permalink:"/handbook/specification/glossary",draft:!1,tags:[],version:"current",frontMatter:{title:"Glossary"},sidebar:"specification",previous:{title:"Canonic Encoding",permalink:"/handbook/specification/encoding-data"}},s={},c=[],l={toc:c};function u(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/encoding-data#cbor"},"CBOR")),": Concise Binary Object Representation data format used for encoding ",(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/operations"},"operations"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo#encoding"},"hex-encoding")),": human-friendly representation of binary-coded values using the hexadecimal numeral system. The ",(0,r.kt)("inlineCode",{parentName:"p"},"p2panda")," GraphQL ",(0,r.kt)("a",{parentName:"p",href:"/specification/APIs/overview"},"APIs"),": require values to be hex-encoded."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo"},"Bamboo")),": an append-only log data type that ensures security and authenticity of arbitrary data in order to share it in a decentralised and trustless setting."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo#hashing"},"Hashing")),": a cryptography method that converts any form of data to a unique text string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo#hashing"},"Hash")),": the result of applying a hashing function to some data, this hash is used to uniquely identify and verify the hashed data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/bamboo-rs/yasmf-hash"},"Yasmf")),": a multiformat hash used in ",(0,r.kt)("inlineCode",{parentName:"p"},"p2panda"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo#author"},"Author (in Bamboo)")),": the public key included in a Bamboo entry."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/key-pairs"},"Key Pair")),": a string of data that is used to lock or unlock cryptographic functions, including authentication, authorization and encryption."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Private Key"),": the private key in a key pair, used for signing data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Public Key"),": the public key in a key pair, used to identify an author and verify signed data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/bamboo"},"Entry")),": an entry in an append only log."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/operations"},"Operation")),": ",(0,r.kt)("inlineCode",{parentName:"p"},"p2panda")," data type which describes data mutations. Collections of linked operations form causal mutation graphs which are the foundation for ",(0,r.kt)("inlineCode",{parentName:"p"},"p2panda")," ",(0,r.kt)("a",{parentName:"p",href:"/specification/data-types/documents"},"Documents"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/specification/data-types/documents"},"Document")),": conflict free multi-writer data type which represents most application and system data in ",(0,r.kt)("inlineCode",{parentName:"p"},"p2panda"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Document View")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Materialisation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[Author]")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[Schema]")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[application data]")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[system data]")))}u.isMDXComponent=!0}}]);
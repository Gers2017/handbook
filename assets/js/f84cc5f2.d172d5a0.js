"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[460],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,h=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},425:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),i=n(6010);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:n},t)}},4259:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),i=n(7294),o=n(6010),r=n(1048),l=n(3609),p=n(1943),s=n(2957);const d="tabList__CuJ",m="tabItem_LNqP";function u(e){var t,n;const{lazy:r,block:u,defaultValue:c,values:h,groupId:f,className:k}=e,b=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=h?h:b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,l.l)(y,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===c?c:null!=(t=null!=c?c:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?t:b[0].props.value;if(null!==v&&!y.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:T}=(0,p.U)(),[O,w]=(0,i.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:C}=(0,s.o5)();if(null!=f){const e=g[f];null!=e&&e!==O&&y.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,n=E.indexOf(t),a=y[n].value;a!==O&&(C(t),w(a),null!=f&&T(f,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=E.indexOf(e.currentTarget)+1;n=null!=(a=E[t])?a:E[0];break}case"ArrowLeft":{var i;const t=E.indexOf(e.currentTarget)-1;n=null!=(i=E[t])?i:E[E.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},k)},y.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>E.push(e),onKeyDown:P,onFocus:I,onClick:I},r,{className:(0,o.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),r?(0,i.cloneElement)(b.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function c(e){const t=(0,r.Z)();return i.createElement(u,(0,a.Z)({key:String(t)},e))}},855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(4137)),o=n(4259),r=n(425);const l={id:"operations",title:"Operations"},p=void 0,s={unversionedId:"specification/data-types/operations",id:"specification/data-types/operations",title:"Operations",description:"- Operations represent atomic data changes.",source:"@site/docs/specification/data-types/operations.md",sourceDirName:"specification/data-types",slug:"/specification/data-types/operations",permalink:"/handbook/specification/data-types/operations",draft:!1,tags:[],version:"current",frontMatter:{id:"operations",title:"Operations"},sidebar:"specification",previous:{title:"Key Pairs",permalink:"/handbook/specification/data-types/key-pairs"},next:{title:"Schemas",permalink:"/handbook/specification/data-types/schemas"}},d={},m=[{value:"Encoding Format",id:"encoding-format",level:2},{value:"Items",id:"items",level:2},{value:"Version",id:"version",level:3},{value:"Action",id:"action",level:3},{value:"Schema Id",id:"schema-id",level:3},{value:"Previous",id:"previous",level:3},{value:"Fields",id:"fields",level:3},{value:"Usage",id:"usage",level:2}],u={toc:m};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Operations represent atomic data changes."),(0,i.kt)("li",{parentName:"ul"},"Operations are published as the payload of ",(0,i.kt)("em",{parentName:"li"},"bamboo entries"),"."),(0,i.kt)("li",{parentName:"ul"},"Operations are identified by the hash of their bamboo entry."),(0,i.kt)("li",{parentName:"ul"},"Every operation is associated with a ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/key-pairs"},"bamboo author"),", which is encoded in the operation's ",(0,i.kt)("em",{parentName:"li"},"entry"))),(0,i.kt)("admonition",{title:"Definition: Operation ID",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("em",{parentName:"p"},"operation id")," uniquely identifies an operation. It is equal to the hash of the Bamboo entry that has the operation as its payload.")),(0,i.kt)(o.Z,{groupId:"entries",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"struct Operation {\n  /// Version of this operation.\n  pub version: OperationVersion,\n\n  /// Describes if this operation creates, updates or deletes data.\n  pub action: OperationAction,\n\n  /// The id of the schema for this operation.\n  pub schema_id: SchemaId,\n\n  /// Optional document view id containing the operation ids directly preceding this one in the\n  /// document.\n  pub previous_operations: Option<DocumentViewId>,\n\n  /// Optional fields map holding the operation data.\n  pub fields: Option<BTreeMap<String, OperationValue>>,\n}\n"))),(0,i.kt)(r.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type Operation = {\n  /** Version of this operation encoding */\n  version: VersionNumber;\n\n  /** Operation action */\n  action: OperationAction;\n\n  /** Id of schema this operation matches */\n  schemaId: SchemaId;\n\n  /** Document view id pointing at previous operations, needs to be set\n   * for UPDATE and DELETE operations */\n  previous?: DocumentViewId;\n\n  /** The fields of this operation */\n  fields?: Map<string, OperationValue>;\n};\n")))),(0,i.kt)("h2",{id:"encoding-format"},"Encoding Format"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CBOR is a binary encoding that is used to encode the contents of an operation and produce bytes that can be associated with a Bamboo entry, stored, and sent over a network connection."),(0,i.kt)("li",{parentName:"ul"},"Operations are encoded as arrays of items, described in more detail below.")),(0,i.kt)("admonition",{title:"Requirement OP1",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"An operation MUST be encoded using hexadecimal encoded ",(0,i.kt)("a",{parentName:"p",href:"https://cbor.io/"},"CBOR")," with the following format:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"[version, action, schema_id, [previous]?, { [field_key]: <field_value> }?]")),(0,i.kt)("p",{parentName:"admonition"},"Operations MUST NOT contain any additional items.")),(0,i.kt)("h2",{id:"items"},"Items"),(0,i.kt)("h3",{id:"version"},"Version"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The operation version is the version of the p2panda specification that is followed by that operation.")),(0,i.kt)("admonition",{title:"Requirement OP2",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Every operation MUST have an ",(0,i.kt)("em",{parentName:"p"},"operation version"),". An operation version MUST be a positive integer number. An operation version MUST NOT be larger than 256.")),(0,i.kt)("h3",{id:"action"},"Action"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The operation action defines the kind of data change that is described by the operation.")),(0,i.kt)(o.Z,{groupId:"entries",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"enum OperationAction {\n  Create,\n  Update,\n  Delete,\n}\n\n"))),(0,i.kt)(r.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type OperationAction = 'create' | 'update' | 'delete';\n")))),(0,i.kt)("admonition",{title:"Definition: Operation Actions",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There are 3 types of operation:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"create operations")," initialise new documents and set all of their field values."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"update operations")," mutate any number of fields on an existing document."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"delete operations")," delete an existing document."))),(0,i.kt)("admonition",{title:"Requirement OP3",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Every operation MUST have an ",(0,i.kt)("em",{parentName:"p"},"operation action"),", which MUST be one of"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," - denotes a CREATE action and results in a ",(0,i.kt)("em",{parentName:"li"},"create operation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," - denotes an UPDATE action and results in a ",(0,i.kt)("em",{parentName:"li"},"update operation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," - denotes a DELETE action and results in a ",(0,i.kt)("em",{parentName:"li"},"delete operation")))),(0,i.kt)("h3",{id:"schema-id"},"Schema Id"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The schema of an operation may define additional requirements for the operation's action, previous and fields items.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"See the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/schemas"},"schema")," section for more details.")))),(0,i.kt)("admonition",{title:"Requirement OP4",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Every operation MUST have a ",(0,i.kt)("a",{parentName:"p",href:"/specification/data-types/schemas"},"schema id"),".")),(0,i.kt)("h3",{id:"previous"},"Previous"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"previous")," specifies where an operation should be placed when constructing the graph of operations required to materialise a document.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It contains an array of ",(0,i.kt)("em",{parentName:"li"},"operation_id"),"'s which identify the tip operation of any un-merged branches in this document at the time of\npublishing this operation."),(0,i.kt)("li",{parentName:"ul"},"In the case where a graph has no un-merged branches, this array will contain only one id (the resolved graph tip)."),(0,i.kt)("li",{parentName:"ul"},"Publishing an operation which identifies more than one graph tip effectively merges these branches into one.")))),(0,i.kt)("admonition",{title:"Requirement OP5",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"DELETE and UPDATE operations MUST have ",(0,i.kt)("em",{parentName:"p"},"previous")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"length > 0"),". CREATE operations MUST NOT have ",(0,i.kt)("em",{parentName:"p"},"previous"),".")),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Operation fields")," contain the actual data carried by an operation."),(0,i.kt)("li",{parentName:"ul"},"Depending on the operation's action and schema, different requirements exist for which data must be contained in the operation."),(0,i.kt)("li",{parentName:"ul"},"Fields map field names to field values",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"field names are strings"),(0,i.kt)("li",{parentName:"ul"},"field values can be of type: ",(0,i.kt)("inlineCode",{parentName:"li"},"u64"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"f64"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"relation"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"relation_list"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"pinned_relation"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"pinned_relation_list")),(0,i.kt)("li",{parentName:"ul"},"see ","[schema][/specification/data-types/schemas]"," for further specification of field names and values"))),(0,i.kt)("li",{parentName:"ul"},"The schema defined by the schema id item of the operation specifies the name and type of each field which can be included in an operation."),(0,i.kt)("li",{parentName:"ul"},"In order to deserialise typed field values, a copy of the schema is required.")),(0,i.kt)(o.Z,{groupId:"entries",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"enum OperationValue {\n  Boolean(bool),\n  Integer(i64),\n  Float(f64),\n  String(String),\n  Relation(Relation),\n  RelationList(RelationList),\n  PinnedRelation(PinnedRelation),\n  PinnedRelationList(PinnedRelationList),\n}\n"))),(0,i.kt)(r.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type OperationValue =\n  | boolean\n  | bigint\n  | number\n  | string\n  | DocumentId // relation\n  | DocumentId[] // relation list\n  | DocumentViewId // pinned relation\n  | DocumentViewId[]; // pinned relation list\n")))),(0,i.kt)("admonition",{title:"Requirement OP6",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"A CREATE operation MUST contain all fields defined by the operation's ",(0,i.kt)("em",{parentName:"p"},"operation schema"),".\nAn UPDATE operation MAY contain any combination of fields from the operation's ",(0,i.kt)("em",{parentName:"p"},"operation schema"),".\nA DELETE operation MUST NOT contain any fields.")),(0,i.kt)("admonition",{title:"Requirement OP7",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The encoding reflects the core data types of CBOR while they MUST be interpreted as p2panda operation values when decoding with the help of a schema:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," can be interpreted as any string or a document id for a relation depending on the schema"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string[]")," can be interpreted as a pinned relation (document view id) or a relation list (list of document ids) depending on the schema"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string[][]")," is a pinned relation list"))),(0,i.kt)("admonition",{title:"Requirement OP8",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The type of all operation field values MUST match the corresponding field in the operation's schema.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clients can use operations to publish data changes."),(0,i.kt)("li",{parentName:"ul"},"Clients must embed operations in bamboo entries to publish them."),(0,i.kt)("li",{parentName:"ul"},"Clients can create a ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents"},"document")," by publishing a CREATE operation."),(0,i.kt)("li",{parentName:"ul"},"Clients can update a document by publishing an ",(0,i.kt)("em",{parentName:"li"},"update operation"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Every ",(0,i.kt)("em",{parentName:"li"},"update operation")," leads to a new ",(0,i.kt)("em",{parentName:"li"},"document view")," of the document that is being updated."))),(0,i.kt)("li",{parentName:"ul"},"Clients can delete a document by publishing a ",(0,i.kt)("em",{parentName:"li"},"delete operation"),"."),(0,i.kt)("li",{parentName:"ul"},"Nodes can ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents#reduction"},"reduce")," operations to produce a specific ",(0,i.kt)("em",{parentName:"li"},"document view")," of their document."),(0,i.kt)("li",{parentName:"ul"},"Clients can delete a document by publishing a ",(0,i.kt)("em",{parentName:"li"},"delete operation"),".")),(0,i.kt)("admonition",{title:"Requirement OP9",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Nodes MUST delete all operations of a document once it has been deleted. (",(0,i.kt)("em",{parentName:"p"},"note: this should probably go into the documents section"),").")))}c.isMDXComponent=!0}}]);
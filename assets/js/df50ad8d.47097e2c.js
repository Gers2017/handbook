"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[3094],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(4137));const i={id:"replication-protocol",title:"Replication Protocol"},r=void 0,l={unversionedId:"specification/networking/replication-protocol",id:"specification/networking/replication-protocol",title:"Replication Protocol",description:"- Replication is the process by which nodes exchange entries and operations to eventually converge all to the same state",source:"@site/docs/specification/networking/replication-protocol.md",sourceDirName:"specification/networking",slug:"/specification/networking/replication-protocol",permalink:"/handbook/specification/networking/replication-protocol",draft:!1,tags:[],version:"current",frontMatter:{id:"replication-protocol",title:"Replication Protocol"},sidebar:"specification",previous:{title:"Discovery",permalink:"/handbook/specification/networking/discovery"},next:{title:"Canonic Encoding",permalink:"/handbook/specification/encoding-data"}},p={},c=[{value:"Transport protocol",id:"transport-protocol",level:2},{value:"GraphQL over HTTP",id:"graphql-over-http",level:3},{value:"GraphQL over qp2p",id:"graphql-over-qp2p",level:3},{value:"Encryption",id:"encryption",level:3},{value:"Replication protocol",id:"replication-protocol",level:2},{value:"Basic Replication",id:"basic-replication",level:3}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Replication is the process by which nodes exchange entries and operations to eventually converge all to the same state",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This makes p2panda an ",(0,o.kt)("em",{parentName:"li"},"eventually consistent")," database"),(0,o.kt)("li",{parentName:"ul"},"Nodes autonomously share data with each other without central coordination"))),(0,o.kt)("li",{parentName:"ul"},"Nodes may not be interested in all available data and can choose to receive only some data",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For example from a set of authors or schemas")))),(0,o.kt)("h2",{id:"transport-protocol"},"Transport protocol"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"p2panda replication protocol is based on the GraphQL query language",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This allows developers to easily build their p2panda replication implementations in any programming language"),(0,o.kt)("li",{parentName:"ul"},'This allows "leecher" node implementations in the browser which collect and persist entries but do not communicate and replicate further with other nodes')))),(0,o.kt)("h3",{id:"graphql-over-http"},"GraphQL over HTTP"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The GraphQL queries can be made via HTTP against ",(0,o.kt)("inlineCode",{parentName:"li"},"<host>:2020/graphql"))),(0,o.kt)("h3",{id:"graphql-over-qp2p"},"GraphQL over qp2p"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nodes can offer a ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/maidsafe/qp2p"},"qp2p")," endpoint on port ",(0,o.kt)("inlineCode",{parentName:"li"},"2022")," for replication via the qp2p (QUIC, TLS 1.3) protocol"),(0,o.kt)("li",{parentName:"ul"},"qp2p is a p2p messaging protocol sending discrete GraphQL queries over QUIC streams, it ..",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Has built-in support for the Internet Gateway Device Protocol (IGD) for automatic port forwarding for peers behind NAT-enabled routers"),(0,o.kt)("li",{parentName:"ul"},"Is based on the QUIC streaming protocol supporting both unidirectional and bidirectional streams"),(0,o.kt)("li",{parentName:"ul"},"Has a fault-tolerancy mechanism"),(0,o.kt)("li",{parentName:"ul"},"Makes use of connection pooling, for reusing already opened connections")))),(0,o.kt)("h3",{id:"encryption"},"Encryption"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Data over qp2p and regular HTTP transport connection is secured via TLS 1.3"),(0,o.kt)("li",{parentName:"ul"},"TLS certificates are self-signed certificates by default",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This allows transport encryption without a centralised certificate authority (CA)"),(0,o.kt)("li",{parentName:"ul"},"This doesn't give authentication but since p2panda data is already authenticated and designed to function in a trustless network setting, this doesn't need to be reflected on this layer"),(0,o.kt)("li",{parentName:"ul"},"Optionally a p2panda node can be moved behind a reverse-proxy providing its own certificates")))),(0,o.kt)("h2",{id:"replication-protocol"},"Replication protocol"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The replication protocol defines the process of exchanging entries and p2panda operations on top of the GraphQL Node API")),(0,o.kt)("h3",{id:"basic-replication"},"Basic Replication"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Retrieves new entries from another node"),(0,o.kt)("li",{parentName:"ul"},"More sophisticated replication protocols can be built on top",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'The "basic replication" protocol serves as a base'),(0,o.kt)("li",{parentName:"ul"},"Nodes may not be interested in all available data and can choose to receive only some data, for example by only requesting operations following a certain schema")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Process")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Node ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," gets latest known sequence number ",(0,o.kt)("inlineCode",{parentName:"li"},"s")," for log ",(0,o.kt)("inlineCode",{parentName:"li"},"k")," of author ",(0,o.kt)("inlineCode",{parentName:"li"},"p")," from own database"),(0,o.kt)("li",{parentName:"ol"},"Node ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," makes a GraphQL request ",(0,o.kt)("inlineCode",{parentName:"li"},"entriesNewerThanSeqNum")," and asks Node ",(0,o.kt)("inlineCode",{parentName:"li"},"B")," if it has newer entries of log ",(0,o.kt)("inlineCode",{parentName:"li"},"k")," and author ",(0,o.kt)("inlineCode",{parentName:"li"},"p")," starting from sequence number ",(0,o.kt)("inlineCode",{parentName:"li"},"s")),(0,o.kt)("li",{parentName:"ol"},"Node ",(0,o.kt)("inlineCode",{parentName:"li"},"B")," replies with a paginated list of encoded entries and operations. If it doesn't have that log or if there are no newer entries, it replies with an empty result"),(0,o.kt)("li",{parentName:"ol"},"Node ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," paginates through the response until it downloads all new entries, it validates them locally and stores them in its database. Node ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," can make use of the ",(0,o.kt)("inlineCode",{parentName:"li"},"certificatePool")," field of ",(0,o.kt)("inlineCode",{parentName:"li"},"EncodedEntryAndOperation")," if it doesn't have the full log locally to verify it")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[6926],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(7462),i=(t(7294),t(4137));const r={id:"queries",title:"Queries"},l=void 0,o={unversionedId:"specification/APIs/queries",id:"specification/APIs/queries",title:"Queries",description:"- The GraphQL schema of a node changes depending on the schemas that are available on the node.",source:"@site/docs/specification/APIs/queries.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/queries",permalink:"/handbook/specification/APIs/queries",draft:!1,tags:[],version:"current",frontMatter:{id:"queries",title:"Queries"},sidebar:"specification",previous:{title:"Publishing",permalink:"/handbook/specification/APIs/publishing"},next:{title:"Replication",permalink:"/handbook/specification/APIs/replication"}},s={},d=[{value:"GraphQL type",id:"graphql-type",level:2},{value:"<code>&lt;schema_id&gt;</code>",id:"schema_id",level:2},{value:"<code>all_&lt;schema_id&gt;</code>",id:"all_schema_id",level:2}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The GraphQL schema of a node changes depending on the schemas that are available on the node."),(0,i.kt)("li",{parentName:"ul"},"A node inserts additional queryable fields into the root query type for every schema that can be queried.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In addition, types for the responses of these fields are generated according to the schemas' definitions."),(0,i.kt)("li",{parentName:"ul"},"Together, these allow clients to request documents including their materialised views and metadata."),(0,i.kt)("li",{parentName:"ul"},"Detailed descriptions of both of these follow below."))),(0,i.kt)("li",{parentName:"ul"},"Therefore, client implementations SHOULD gracefully handle being connected to a node that doesn't process a schema they would like to interact with."),(0,i.kt)("li",{parentName:"ul"},"This specification defines a generic form for these dynamic GraphQL fields and types.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The string ",(0,i.kt)("inlineCode",{parentName:"li"},"<schema_id>")," is used as a generic placeholder to be replaced by a concrete ",(0,i.kt)("em",{parentName:"li"},"schema id"),".")))),(0,i.kt)("h2",{id:"graphql-type"},"GraphQL type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Nodes generate two GraphQL types for every schema that can be queried:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"a type ",(0,i.kt)("inlineCode",{parentName:"li"},"<schema_id>")," that contains fields for document metadata and the associated document view"),(0,i.kt)("li",{parentName:"ol"},"a type ",(0,i.kt)("inlineCode",{parentName:"li"},"<schema_id>Fields")," to represent the document view's fields with the actual data contained in the document"))),(0,i.kt)("li",{parentName:"ul"},"Document fields with the types ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Integer"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Float")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," are represented with the corresponding GraphQL scalar types."),(0,i.kt)("li",{parentName:"ul"},"Document fields with the relation types ",(0,i.kt)("inlineCode",{parentName:"li"},"Relation")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"RelationList")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PinnedRelation")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"PinnedRelationList")," use the type generated for that field's schema.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type <schema_id> {\n  """\n  meta information about the returned document and document view\n  """\n  meta: DocumentMeta,\n\n  """\n  actual data contained in the document view\n  """\n  fields: <schema_id>Fields,\n}\n\ntype <schema_id>Fields {\n  """\n  named fields containing the actual, materialised values of this document\n  view. the form is defined by the regarding p2panda schema\n  """\n  <field_name>: <field_type>\n\n  """\n  ... potentially more fields\n  """\n}\n\ntype DocumentMeta {\n  """\n  identifier of the returned document\n  """\n  documentId: DocumentId!\n\n  """\n  document view id contained in this response\n  """\n  viewId: DocumentViewId!\n\n  """\n  this field is `true` if this document has been deleted\n  """\n  deleted: Boolean!\n\n  """\n  this field is `true` if this document view has been updated at least once\n  """\n  edited: Boolean!\n}\n')),(0,i.kt)("h2",{id:"schema_id"},(0,i.kt)("inlineCode",{parentName:"h2"},"<schema_id>")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns a single document that uses this schema",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"implementations must have no side effects"))),(0,i.kt)("li",{parentName:"ul"},"the name of this field is equal to the ",(0,i.kt)("em",{parentName:"li"},"schema id")," of the schema it represents"),(0,i.kt)("li",{parentName:"ul"},"either the ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"viewId")," field argument must be set",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," contains a document id, the response must contain the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents#the-latest-document-view"},(0,i.kt)("em",{parentName:"a"},"latest document view"))," for that document"),(0,i.kt)("li",{parentName:"ul"},"if ",(0,i.kt)("inlineCode",{parentName:"li"},"viewId")," contains a document view id, the response must contain this document view"),(0,i.kt)("li",{parentName:"ul"},"if both field arguments are given the view id is used"))),(0,i.kt)("li",{parentName:"ul"},'not every node holds all documents and especially not all document views (historical states of a document) in its database because of the decentralised nature of p2panda. in this case a "not found" error will be returned')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type QueryRoot {\n  # ... other query root fields here ...\n\n  <schema_id>(\n    """\n    id of the document to be queried\n    """\n    id: DocumentId\n\n    """\n    specific document view id to be queried\n    """\n    viewId: DocumentViewId\n  ): <schema_id>\n}\n')),(0,i.kt)("h2",{id:"all_schema_id"},(0,i.kt)("inlineCode",{parentName:"h2"},"all_<schema_id>")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents#the-latest-document-view"},"latest document view")," for many documents of a given schema",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"implementations must have no side effects"))),(0,i.kt)("li",{parentName:"ul"},"deleted documents must not be included in the response unless they are explicitly included using a filter"),(0,i.kt)("li",{parentName:"ul"},"response is paginated, can be sorted and filtered")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Filters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"filters can be applied on any operation field of type ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"integer"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"in special cases also ",(0,i.kt)("inlineCode",{parentName:"li"},"relation")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pinned_relation")," can be filtered, see self-referential relations section below"))),(0,i.kt)("li",{parentName:"ul"},"if no filter is selected all document views following that given schema will be selected")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Ordering")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if no ordering is selected the documents will be ordered by document id, ascending")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pagination")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"our pagination adheres to the ",(0,i.kt)("a",{parentName:"li",href:"https://relay.dev/graphql/connections.htm"},"connection specification")," of graphql",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"cursor")," is an opaque and unique identifier of every connection edge and can be implemented differently as long as it aids pagination",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we recommend a base64 encoded document view id as a cursor"),(0,i.kt)("li",{parentName:"ul"},"as stated by the ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/pagination/#pagination-and-edges"},"pagination specification")," of graphql the encoding should aid reminding developers that this data is opaque should not be relied upon")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Self-referential fields")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the selected ",(0,i.kt)("inlineCode",{parentName:"li"},"orderBy")," field is a ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/schemas#relation-fields"},"self-referential relation")," the node will return a topologically ordered list of that reference graph in the same manner as the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents#reduction"},"reduction")," algorithm works"),(0,i.kt)("li",{parentName:"ul"},"if the selected filter field is a self-referential relation the topologically ordered list will be filtered")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type QueryRoot {\n  # ... other query root fields here ...\n\n  all_<schema_id>(\n    """\n    filter collection of documents\n    """\n    where: <schema_id>Filter\n\n    """\n    order results by field values\n    """\n    orderBy: <field_name>\n\n    """\n    order results in specified direction ("asc" or "desc")\n    """\n    orderDirection: String\n\n    """\n    max number of items to be returned per page\n    """\n    first: Int\n\n    """\n    cursor identifier for pagination\n    """\n    after: String\n  ): <schema_id>Page!\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type <schema_id>Filter {\n  """\n  filter by public key\n  """\n  publicKey: PublicKey\n\n  """\n  filter by deletion status\n  """\n  deleted: Boolean\n\n  """\n  filter by editing status\n  """\n  edited: Boolean\n\n  """\n  filter by fields containing that exact value\n  """\n  <field_name>: <value>\n\n  """\n  filter by fields not containing that exact value\n  """\n  <field_name>_ne: <value>\n\n  """\n  filter by fields containing larger values\n  """\n  <field_name>_gt: <value>\n\n  """\n  filter by fields containing larger or equal values\n  """\n  <field_name>_gte: <value>\n\n  """\n  filter by fields containing lower values\n  """\n  <field_name>_lt: <value>\n\n  """\n  filter by fields containing lower or equal values\n  """\n  <field_name>_lte: <value>\n}\n\ntype <schema_id>Page {\n  """\n  information to aid in pagination\n  """\n  pageInfo: <schema_id>PageInfo!\n\n  """\n  list of returned items with pagination data\n  """\n  edges: [<schema_id>PageEdge]\n}\n\ntype <schema_id>PageInfo {\n  """\n  when paginating backwards, are there more items?\n  """\n  hasPreviousPage: Boolean!\n\n  """\n  when paginating forwards, are there more items?\n  """\n  hasNextPage: Boolean!\n\n  """\n  when paginating backwards, the cursor to continue.\n  """\n  startCursor: String\n\n  """\n  when paginating forwards, the cursor to continue.\n  """\n  endCursor: String\n}\n\ntype <schema_id>PageEdge {\n  """\n  item at the end of the pagination edge\n  """\n  node: <schema_id>!\n\n  """\n  cursor to use in pagination\n  """\n  cursor: String!\n}\n')))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkp2panda_website=self.webpackChunkp2panda_website||[]).push([[5228],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(n),m=o,f=s["".concat(c,".").concat(m)]||s[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6368:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const i={id:"reduction"},a="Reduction",l={unversionedId:"organising-data/reduction",id:"organising-data/reduction",title:"Reduction",description:"- reduction is the process of creating an document view from a document (c.f. documents and views)",source:"@site/docs/02-organising-data/reduction.md",sourceDirName:"02-organising-data",slug:"/organising-data/reduction",permalink:"/handbook/docs/organising-data/reduction",draft:!1,editUrl:"https://github.com/p2panda/handbook/edit/main/website/docs/02-organising-data/reduction.md",tags:[],version:"current",frontMatter:{id:"reduction"},sidebar:"docs",previous:{title:"Documents and Document Views",permalink:"/handbook/docs/organising-data/documents"},next:{title:"Queries",permalink:"/handbook/docs/organising-data/queries"}},c={},u=[{value:"Algorithm",id:"algorithm",level:2},{value:"1. Sort operation graph",id:"1-sort-operation-graph",level:3},{value:"2. Reduction",id:"2-reduction",level:3}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reduction"},"Reduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"reduction is the process of creating an ",(0,o.kt)("em",{parentName:"li"},"document view")," from a ",(0,o.kt)("em",{parentName:"li"},"document")," (c.f. ",(0,o.kt)("a",{parentName:"li",href:"/docs/organising-data/documents"},"documents and views"),")"),(0,o.kt)("li",{parentName:"ul"},"it is a CRDT (conflict resistant data type)")),(0,o.kt)("h2",{id:"algorithm"},"Algorithm"),(0,o.kt)("h3",{id:"1-sort-operation-graph"},"1. Sort operation graph"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"preprocess the document graph by applying topological sorting (depth first) to linearise the operation graph",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"sorting the graph needs to be deterministic, with the path chosen to walk first being decided by a ",(0,o.kt)("inlineCode",{parentName:"li"},">"),' comparison between the operation ids of each node ("larger" hash wins)')))),(0,o.kt)("h3",{id:"2-reduction"},"2. Reduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"iterate over sorted list by applying the following rules:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Deserialise all fields of the document's ",(0,o.kt)("em",{parentName:"li"},"create operation")," to produce an ",(0,o.kt)("em",{parentName:"li"},"document view")),(0,o.kt)("li",{parentName:"ol"},"If the next operation in the document is an ",(0,o.kt)("em",{parentName:"li"},"update operation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"for every field in the operation",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"overwrite this field's contents on the view with the contents from the operation"))))),(0,o.kt)("li",{parentName:"ol"},"If the next operation in the document is a ",(0,o.kt)("em",{parentName:"li"},"delete operation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"remove the content on all fields of the view"),(0,o.kt)("li",{parentName:"ul"},"mark the view deleted"))),(0,o.kt)("li",{parentName:"ol"},"Stop reduction if there is no next known operation in the document"),(0,o.kt)("li",{parentName:"ol"},"Continue with step 2. otherwise")))))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[651],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const r={id:"publishing",title:"Publishing"},o=void 0,l={unversionedId:"specification/APIs/publishing",id:"specification/APIs/publishing",title:"Publishing",description:"- Clients use two GraphQL operations for publishing entries:",source:"@site/docs/specification/APIs/publishing.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/publishing",permalink:"/handbook/specification/APIs/publishing",draft:!1,tags:[],version:"current",frontMatter:{id:"publishing",title:"Publishing"},sidebar:"specification",previous:{title:"Overview",permalink:"/handbook/specification/APIs/overview"},next:{title:"Queries",permalink:"/handbook/specification/APIs/queries"}},s={},p=[{value:"<code>nextArgs</code>",id:"nextargs",level:2},{value:"<code>publish</code>",id:"publish",level:2},{value:"Response",id:"response",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clients use two GraphQL operations for publishing entries:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#nextargs"},(0,i.kt)("inlineCode",{parentName:"a"},"nextArgs"))," query to retrieve parameters required for encoding an entry"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#publish"},(0,i.kt)("inlineCode",{parentName:"a"},"publish"))," mutation to publish a signed and encoded entry together with its payload")))),(0,i.kt)("h2",{id:"nextargs"},(0,i.kt)("inlineCode",{parentName:"h2"},"nextArgs")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Returns parameters required for encoding new entries",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Implementations must not have side effects"))),(0,i.kt)("li",{parentName:"ul"},"Clients can't encode new entries without information from this endpoint because every entry needs to place itself in the first unused sequence number of a specific ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/bamboo"},(0,i.kt)("em",{parentName:"a"},"bamboo log"))," and also it needs to include the hashes of specific previous entries in its encoding",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This information is held by the node"))),(0,i.kt)("li",{parentName:"ul"},"Clients may cache the arguments required for the next entry (they are also returned by ",(0,i.kt)("inlineCode",{parentName:"li"},"publish"),")"),(0,i.kt)("li",{parentName:"ul"},"Clients may also persist their entry logs locally to avoid any dependency for retrieving entry arguments of nodes at all"),(0,i.kt)("li",{parentName:"ul"},"Clients must set the ",(0,i.kt)("inlineCode",{parentName:"li"},"viewId")," input variable to receive arguments for encoding an ",(0,i.kt)("inlineCode",{parentName:"li"},"UPDATE")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"DELETE")," operation.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Clients must not set this when they want to encode a ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE")," operation")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query nextArgs(\n  """\n  public key of the author signing and encoding the next entry\n  """\n  publicKey: PublicKey!\n\n  """\n  any view id from the document that will be updated or deleted with the next entry. leave empty to receive arguments for creating a new document.\n  """\n  viewId: ViewId\n): NextArguments!\n')),(0,i.kt)("h2",{id:"publish"},(0,i.kt)("inlineCode",{parentName:"h2"},"publish")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If a ",(0,i.kt)("inlineCode",{parentName:"li"},"publish")," request is accepted by a node it must publish the entry supplied with the request by taking the following steps:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The node must validate the received entry and operation by checking if:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The entry adheres to the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/bamboo"},"bamboo specification")," and has a valid signature and log integrity"),(0,i.kt)("li",{parentName:"ul"},"The operation adheres to the ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/operations"},"operation specification")),(0,i.kt)("li",{parentName:"ul"},"The operation is linked to the entry with a correct payload hash and size"))),(0,i.kt)("li",{parentName:"ul"},"The node should persist the entry and operation and make it available to other nodes via ",(0,i.kt)("a",{parentName:"li",href:"/specification/APIs/replication"},"replication")),(0,i.kt)("li",{parentName:"ul"},"The node may ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents#reduction"},"materialise")," the document this new operation belongs to, resulting in a new document view"))),(0,i.kt)("li",{parentName:"ul"},"Returns entry arguments required for publishing the next entry for the same document, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"nextArgs")),(0,i.kt)("li",{parentName:"ul"},"Returns an error",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When the bamboo log, signature or document integrity could not be verified, the operation was malformed or schema not fulfilled"),(0,i.kt)("li",{parentName:"ul"},"When the node is unable to persist the entry and operation at the moment")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation publish(\n  """\n  CBOR representation of a signed Bamboo entry, encoded as a hexadecimal string\n  """\n  entry: EncodedEntry!\n\n  """\n  CBOR representation of an p2panda operation, the payload of the Bamboo entry,\n  encoded as a hexadecimal string\n  """\n  operation: EncodedOperation!\n): NextArguments!\n')),(0,i.kt)("h2",{id:"response"},"Response"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Both ",(0,i.kt)("inlineCode",{parentName:"li"},"publish")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"nextArgs")," return the arguments for encoding and signing the next entry as a response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type NextArguments {\n  """\n  log id to be used to forge the next entry\n  """\n  logId: LogId!\n  \n  """\n  sequence number to be used to forge the next entry\n  """\n  seqNum: SeqNum!\n  \n  """\n  optional backlink hash to be used to forge the next entry\n  """\n  backlink: EntryHash\n  \n  """\n  optional skiplink hash to be used to forge the next entry\n  """\n  skiplink: EntryHash\n}\n')))}c.isMDXComponent=!0}}]);